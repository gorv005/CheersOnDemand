package com.cheersondemand.frameworks.retrofit;import com.cheersondemand.model.CategoriesResponse;import com.cheersondemand.model.GuestUserCreateResponse;import com.cheersondemand.model.ProductsWithCategoryResponse;import com.cheersondemand.model.authentication.AuthenticationResponse;import com.cheersondemand.model.authentication.CategoryRequest;import com.cheersondemand.model.authentication.LoginRequest;import com.cheersondemand.model.authentication.SignUpRequest;import com.cheersondemand.model.authentication.SocialLoginRequest;import com.cheersondemand.model.location.SaveLocation;import com.cheersondemand.model.location.SaveLocationResponse;import com.cheersondemand.model.logout.LogoutRequest;import com.cheersondemand.model.logout.LogoutResponse;import com.cheersondemand.model.productdescription.SimilarProductsResponse;import com.cheersondemand.model.store.StoreListResponse;import com.cheersondemand.model.store.UpdateStore;import com.cheersondemand.model.store.UpdateStoreResponse;import com.google.gson.Gson;import okhttp3.OkHttpClient;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Call;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;/** * Created by abhishekkumar on 2/7/18. */public class WebServicesWrapper {    private final static String BASE_URL = "http://ror.anasource.com:8090";    private static WebServicesWrapper wrapper;    protected WebServices webServices;    private Gson gson;    private WebServicesWrapper(String baseUrl) {        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);        OkHttpClient client = new OkHttpClient.Builder().addInterceptor(interceptor).build();        webServices = new Retrofit.Builder()                .addConverterFactory(GsonConverterFactory.create())                .baseUrl(baseUrl)                .client(client)                .build().create(WebServices.class);        gson = new Gson();    }    public static WebServicesWrapper getInstance() {        if (wrapper == null)            wrapper = new WebServicesWrapper(BASE_URL);        return wrapper;    }    public Call<AuthenticationResponse> signUp(ResponseResolver<AuthenticationResponse> apiResponseResponseResolve, SignUpRequest signUpRequestr) {        Call<AuthenticationResponse> apiResponseResponseCall = webServices.signUpUsingEmail(signUpRequestr);        apiResponseResponseCall.enqueue(apiResponseResponseResolve);        return apiResponseResponseCall;    }    public Call<AuthenticationResponse> loginUsingEmail(ResponseResolver<AuthenticationResponse> apiResponseResponseResolve, LoginRequest loginRequest) {        Call<AuthenticationResponse> apiResponseResponseCall = webServices.loginUsingEmail(loginRequest);        apiResponseResponseCall.enqueue(apiResponseResponseResolve);        return apiResponseResponseCall;    }    public Call<AuthenticationResponse> loginUsingSocial(ResponseResolver<AuthenticationResponse> apiResponseResponseResolve, SocialLoginRequest loginRequest) {        Call<AuthenticationResponse> apiResponseResponseCall = webServices.loginUsingSocial(loginRequest);        apiResponseResponseCall.enqueue(apiResponseResponseResolve);        return apiResponseResponseCall;    }    public Call<CategoriesResponse> getCategories(ResponseResolver<CategoriesResponse> apiResponseResponseResolve, CategoryRequest uuid) {        Call<CategoriesResponse> categoriesResponseCall = webServices.getBrands(uuid);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    public Call<CategoriesResponse> getCategories(ResponseResolver<CategoriesResponse> apiResponseResponseResolve, String uuid) {        Call<CategoriesResponse> categoriesResponseCall = webServices.getGuestBrands(uuid);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }//LANDING SCREEN    public Call<ProductsWithCategoryResponse> getProductsWithCategories(ResponseResolver<ProductsWithCategoryResponse> apiResponseResponseResolve, String uuid) {        Call<ProductsWithCategoryResponse> categoriesResponseCall = webServices.getProductsWithCategories(uuid);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    public Call<ProductsWithCategoryResponse> getProductsWithCategories(ResponseResolver<ProductsWithCategoryResponse> apiResponseResponseResolve,String token, String uuid) {        Call<ProductsWithCategoryResponse> categoriesResponseCall = webServices.getProductsWithCategories(token,uuid);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    public Call<CategoriesResponse> getBrands(ResponseResolver<CategoriesResponse> apiResponseResponseResolve, String auth, CategoryRequest uuid) {        Call<CategoriesResponse> categoriesResponseCall = webServices.getBrands(auth,uuid);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    public Call<GuestUserCreateResponse> createGuestUser(ResponseResolver<GuestUserCreateResponse> apiResponseResponseResolve, CategoryRequest uuid) {        Call<GuestUserCreateResponse> categoriesResponseCall = webServices.createGuestUser(uuid);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    public Call<LogoutResponse> logout(ResponseResolver<LogoutResponse> apiResponseResponseResolve, LogoutRequest request) {        Call<LogoutResponse> categoriesResponseCall = webServices.Logout(request);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    //STORE LIST    public Call<StoreListResponse> getStoreList(ResponseResolver<StoreListResponse> apiResponseResponseResolve, String uuid) {        Call<StoreListResponse> categoriesResponseCall = webServices.getStoreList(uuid);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    public Call<StoreListResponse> getStoreList(ResponseResolver<StoreListResponse> apiResponseResponseResolve,String token, String uuid) {        Call<StoreListResponse> categoriesResponseCall = webServices.getStoreList(token,uuid);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    public Call<UpdateStoreResponse> updateStore(ResponseResolver<UpdateStoreResponse> apiResponseResponseResolve,                                                 UpdateStore updateStore, String id) {        Call<UpdateStoreResponse> categoriesResponseCall = webServices.updateStore(id,updateStore);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    public Call<UpdateStoreResponse> updateStore(ResponseResolver<UpdateStoreResponse> apiResponseResponseResolve,                                                 String token,UpdateStore updateStore, String id) {        Call<UpdateStoreResponse> categoriesResponseCall = webServices.updateStore(token,id,updateStore);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    //SAVE LOCATION    public Call<SaveLocationResponse> saveLocation(ResponseResolver<SaveLocationResponse> apiResponseResponseResolve, SaveLocation saveLocation,String id) {        Call<SaveLocationResponse> categoriesResponseCall = webServices.saveLocation(id,saveLocation);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    public Call<SaveLocationResponse> saveLocation(ResponseResolver<SaveLocationResponse> apiResponseResponseResolve,String token, SaveLocation saveLocation,String id) {        Call<SaveLocationResponse> categoriesResponseCall = webServices.saveLocation(token,id,saveLocation);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    //SAVE LOCATION    public Call<SimilarProductsResponse> getSimilarProducts(ResponseResolver<SimilarProductsResponse> apiResponseResponseResolve, String productID, String uuid,String page, String per_page) {        Call<SimilarProductsResponse> categoriesResponseCall = webServices.getSimilarProducts(productID,uuid,page,per_page);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }    public Call<SimilarProductsResponse> getSimilarProducts(ResponseResolver<SimilarProductsResponse> apiResponseResponseResolve,String token, String productID, String uuid,String page, String per_page) {        Call<SimilarProductsResponse> categoriesResponseCall = webServices.getSimilarProductsAuth(token,productID,page,per_page);        categoriesResponseCall.enqueue(apiResponseResponseResolve);        return categoriesResponseCall;    }}