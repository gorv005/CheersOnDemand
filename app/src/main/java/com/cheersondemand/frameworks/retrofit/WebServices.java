package com.cheersondemand.frameworks.retrofit;import com.cheersondemand.model.BrandResponse;import com.cheersondemand.model.CategoriesResponse;import com.cheersondemand.model.GuestUserCreateResponse;import com.cheersondemand.model.ProductsWithCategoryResponse;import com.cheersondemand.model.SubCategoryResponse;import com.cheersondemand.model.address.AddDeliveryAddressRequest;import com.cheersondemand.model.address.AddressAddResponse;import com.cheersondemand.model.address.AddressRequest;import com.cheersondemand.model.address.AddressResponse;import com.cheersondemand.model.address.RemoveAddressRequest;import com.cheersondemand.model.authentication.AuthenticationResponse;import com.cheersondemand.model.authentication.GenRequest;import com.cheersondemand.model.authentication.LoginRequest;import com.cheersondemand.model.authentication.SignUpRequest;import com.cheersondemand.model.authentication.SocialLoginRequest;import com.cheersondemand.model.card.AddCardRequest;import com.cheersondemand.model.card.CardAddResponse;import com.cheersondemand.model.card.CardListResponse;import com.cheersondemand.model.card.DeleteCardRequest;import com.cheersondemand.model.changepassword.PasswordRequest;import com.cheersondemand.model.changepassword.PasswordResponse;import com.cheersondemand.model.changepassword.ResetPasswordRequest;import com.cheersondemand.model.coupon.ApplyCouponRequest;import com.cheersondemand.model.coupon.CouponInfoResponse;import com.cheersondemand.model.coupon.CouponListResponse;import com.cheersondemand.model.coupon.CouponRequest;import com.cheersondemand.model.deals.DealsResponse;import com.cheersondemand.model.location.RecentLocationResponse;import com.cheersondemand.model.location.SaveLocation;import com.cheersondemand.model.location.SaveLocationResponse;import com.cheersondemand.model.logout.LogoutRequest;import com.cheersondemand.model.logout.LogoutResponse;import com.cheersondemand.model.notification.NotificationResponse;import com.cheersondemand.model.order.CreateOrderResponse;import com.cheersondemand.model.order.addtocart.AddToCartRequest;import com.cheersondemand.model.order.addtocart.AddToCartResponse;import com.cheersondemand.model.order.addtocart.CartHasItemResponse;import com.cheersondemand.model.order.orderdetail.CancelOrderRequest;import com.cheersondemand.model.order.orderdetail.OrderListResponse;import com.cheersondemand.model.order.updatecart.UpdateCartRequest;import com.cheersondemand.model.order.updatecart.UpdateCartResponse;import com.cheersondemand.model.payment.PaymentRequest;import com.cheersondemand.model.payment.PaymentResponse;import com.cheersondemand.model.productList.ProductListResponse;import com.cheersondemand.model.productdescription.SimilarProductsResponse;import com.cheersondemand.model.profile.ProfileUpdateRequest;import com.cheersondemand.model.search.SearchProductResponse;import com.cheersondemand.model.search.SearchResponse;import com.cheersondemand.model.search.SearchResultsResponse;import com.cheersondemand.model.store.AddStore;import com.cheersondemand.model.store.StoreListResponse;import com.cheersondemand.model.store.UpdateStore;import com.cheersondemand.model.store.UpdateStoreResponse;import com.cheersondemand.model.wishlist.WishListDataResponse;import com.cheersondemand.model.wishlist.WishListRequest;import com.cheersondemand.model.wishlist.WishListResponse;import java.util.List;import okhttp3.MultipartBody;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.http.Body;import retrofit2.http.GET;import retrofit2.http.HTTP;import retrofit2.http.Header;import retrofit2.http.Multipart;import retrofit2.http.POST;import retrofit2.http.PUT;import retrofit2.http.Part;import retrofit2.http.Path;import retrofit2.http.Query;public interface WebServices {    @POST("/api/v1/users")    Call<AuthenticationResponse> signUpUsingEmail(@Body SignUpRequest signUpRequest);    @POST("/api/v1/oauth/token")    Call<AuthenticationResponse> loginUsingEmail(@Body LoginRequest loginRequest);    @POST("/api/v1/oauth/token")    Call<AuthenticationResponse> loginUsingSocial(@Body SocialLoginRequest socialLoginRequest);    @GET("/api/v1/brands")    Call<BrandResponse> getBrands(@Query("uuid") String uuid);    @GET("/api/v1/brands")    Call<BrandResponse> getBrands(@Header("Authorization") String token, @Query("uuid") String uuid);    @GET("/api/v1/categories")    Call<CategoriesResponse> getCategories(@Query("uuid") String uuid,@Query("with_subcategory") String with_subcategory);    @GET("/api/v1/categories")    Call<CategoriesResponse> getCategories(@Header("Authorization") String token, @Query("uuid") String uuid,@Query("with_subcategory") String with_subcategory);    @GET("/api/v1/sub_categories")    Call<SubCategoryResponse> getSubCategories(@Query("id") List<Integer> id, @Query("uuid") String uuid);    @GET("/api/v1/sub_categories")    Call<SubCategoryResponse> getSubCategories(@Header("Authorization") String token, @Query("id") List<Integer> id, @Query("uuid") String uuid);    @GET("/api/v1/deals")    Call<DealsResponse> getDeals(@Header("Authorization") String token, @Query("uuid") String uuid);    @GET("/api/v1/deals")    Call<DealsResponse> getDeals( @Query("uuid") String uuid);    //LANDING SCREEN    @GET("/api/v1/products")    Call<ProductsWithCategoryResponse> getProductsWithCategories(@Query("uuid") String uuid);    @GET("/api/v1/products")    Call<ProductsWithCategoryResponse> getProductsWithCategories(@Header("Authorization") String token, @Query("uuid") String uuid);    @POST("/api/v1/users/create_guest_user")    Call<GuestUserCreateResponse> createGuestUser(@Body GenRequest uuid);    @POST("/api/v1/oauth/revoke")    Call<LogoutResponse> Logout(@Body LogoutRequest logoutRequest);    //STORE    @GET("/api/v1/stores/available_stores_list")    Call<StoreListResponse> getStoreList(@Query("uuid") String uuid);    @GET("/api/v1/stores/available_stores_list")    Call<StoreListResponse> getStoreList(@Header("Authorization") String token, @Query("uuid") String uuid);    @PUT("/api/v1/users/{user_id}/update_current_store")    Call<UpdateStoreResponse> updateStore(@Path("user_id") String user_id, @Body UpdateStore updateStore);    @PUT("/api/v1/users/{user_id}/update_current_store")    Call<UpdateStoreResponse> updateStore(@Header("Authorization") String token, @Path("user_id") String user_id, @Body UpdateStore updateStore);    //SAVE LOCATION    @PUT("/api/v1/users/{user_id}/save_user_location")    Call<SaveLocationResponse> saveLocation(@Path("user_id") String user_id, @Body SaveLocation saveLocation);    @PUT("/api/v1/users/{user_id}/save_user_location")    Call<SaveLocationResponse> saveLocation(@Header("Authorization") String token, @Path("user_id") String user_id, @Body SaveLocation saveLocation);    @GET("/api/v1/users/{user_id}/locations")    Call<RecentLocationResponse> getRecentLocation(@Path("user_id") String user_id, @Query("uuid") String uuid);    @GET("/api/v1/users/{user_id}/locations")    Call<RecentLocationResponse> getRecentLocation(@Header("Authorization") String token, @Path("user_id") String user_id, @Query("uuid") String uuid);    //SIMILAR PRODUCT    @GET("/api/v1/products/{product_id}")    Call<SimilarProductsResponse> getSimilarProducts(@Path("product_id") String product_id, @Query("uuid") String uuid, @Query("page") String page, @Query("per_page") String per_page);    @GET("/api/v1/products/{product_id}")    Call<SimilarProductsResponse> getSimilarProductsAuth(@Header("Authorization") String token, @Path("product_id") String product_id, @Query("page") String page, @Query("per_page") String per_page);    //Create Order    @POST("/api/v1/users/{user_id}/carts")    Call<CreateOrderResponse> createOrder(@Path("user_id") String user_id, @Body GenRequest uuid);    @POST("/api/v1/users/{user_id}/carts")    Call<CreateOrderResponse> createOrder(@Header("Authorization") String token, @Path("user_id") String user_id, @Body GenRequest uuid);    //ADD To Cart    @POST("/api/v1/users/{user_id}/carts/{order_id}/add_cart_item")    Call<AddToCartResponse> addToCart(@Path("user_id") String user_id, @Path("order_id") String order_id, @Body AddToCartRequest addToCartRequest);    @POST("/api/v1/users/{user_id}/carts/{order_id}/add_cart_item")    Call<AddToCartResponse> addToCart(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id, @Body AddToCartRequest addToCartRequest);    //Update Cart    @PUT("/api/v1/users/{user_id}/carts/{order_id}/update_cart_item")    Call<UpdateCartResponse> updateCart(@Path("user_id") String user_id, @Path("order_id") String order_id, @Body UpdateCartRequest updateProductQuantityRequest);    @PUT("/api/v1/users/{user_id}/carts/{order_id}/update_cart_item")    Call<UpdateCartResponse> updateCart(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id, @Body UpdateCartRequest updateProductQuantityRequest);    //CHECK CART HAS ITEM    @PUT("/api/v1/users/{user_id}/carts/has_product")    Call<CartHasItemResponse> getCartHasItem(@Path("user_id") String user_id, @Body GenRequest uuid);    @PUT("/api/v1/users/{user_id}/carts/has_product")    Call<CartHasItemResponse> getCartHasItem(@Header("Authorization") String token, @Path("user_id") String user_id, @Body GenRequest uuid);    //  @DELETE("/api/v1/users/{user_id}/carts/{order_id}/remove_cart_item")    //DELETE PRODUCT    @HTTP(method = "DELETE", path = "/api/v1/users/{user_id}/carts/{order_id}/remove_cart_item", hasBody = true)    Call<UpdateCartResponse> removeItemFromCart(@Path("user_id") String user_id, @Path("order_id") String order_id, @Body UpdateCartRequest updateProductQuantityRequest);    @HTTP(method = "DELETE", path = "/api/v1/users/{user_id}/carts/{order_id}/remove_cart_item", hasBody = true)    Call<UpdateCartResponse> removeItemFromCart(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id, @Body UpdateCartRequest updateProductQuantityRequest);    // CART LIST    @GET("/api/v1/users/{user_id}/carts/{order_id}")    Call<UpdateCartResponse> getCartList(@Path("user_id") String user_id, @Path("order_id") String order_id, @Query("uuid") String uuid,@Query("is_from_payment") boolean is_from_payment);    @GET("/api/v1/users/{user_id}/carts/{order_id}")    Call<UpdateCartResponse> getCartList(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id, @Query("uuid") String uuid,@Query("is_from_payment") boolean is_from_payment);    // WishList    @POST("/api/v1/users/{user_id}/wishlists")    Call<WishListResponse> addToWishList(@Path("user_id") String user_id, @Body WishListRequest wishListRequest);    @POST("/api/v1/users/{user_id}/wishlists")    Call<WishListResponse> addToWishList(@Header("Authorization") String token, @Path("user_id") String user_id, @Body WishListRequest wishListRequest);    //DELETE PRODUCT    @HTTP(method = "DELETE", path = "/api/v1/users/{user_id}/wishlists", hasBody = true)    Call<WishListResponse> removeFromWishList(@Path("user_id") String user_id, @Body WishListRequest wishListRequest);    @HTTP(method = "DELETE", path = "/api/v1/users/{user_id}/wishlists", hasBody = true)    Call<WishListResponse> removeFromWishList(@Header("Authorization") String token, @Path("user_id") String user_id, @Body WishListRequest wishListRequest);    @GET("/api/v1/users/{user_id}/wishlists")    Call<WishListDataResponse> getWishList(@Path("user_id") String user_id, @Query("uuid") String uuid);    @GET("/api/v1/users/{user_id}/wishlists")    Call<WishListDataResponse> getWishList(@Header("Authorization") String token, @Path("user_id") String user_id, @Query("uuid") String uuid);    //GET WISHLIST    // COUPONS    @POST("/api/v1/coupons/apply_coupon")    Call<UpdateCartResponse> applyCoupon(@Body ApplyCouponRequest applyCouponRequest);    @POST("/api/v1/coupons/apply_coupon")    Call<UpdateCartResponse> applyCoupon(@Header("Authorization") String token, @Body ApplyCouponRequest applyCouponRequest);    @GET("/api/v1/coupons")    Call<CouponListResponse> getListOfCoupon(@Query("uuid") String uuid, @Query("cart_id") String cart_id);    @GET("/api/v1/coupons")    Call<CouponListResponse> getListOfCoupon(@Header("Authorization") String token, @Query("uuid") String uuid, @Query("cart_id") String cart_id);    @GET("/api/v1/coupons/{coupon_id}")    Call<CouponInfoResponse> getCouponDetail(@Path("coupon_id") String coupon_id, @Query("uuid") String uuid);    @GET("/api/v1/coupons/{coupon_id}")    Call<CouponInfoResponse> getCouponDetail(@Header("Authorization") String token, @Path("coupon_id") String coupon_id, @Query("uuid") String uuid);    @HTTP(method = "DELETE", path = "/api/v1/coupons/remove_coupon", hasBody = true)    Call<UpdateCartResponse> removeCoupon(@Header("Authorization") String token, @Body CouponRequest couponRequest);    @HTTP(method = "DELETE", path = "/api/v1/coupons/remove_coupon", hasBody = true)    Call<UpdateCartResponse> removeCoupon(@Body CouponRequest couponRequest);    //Products Listing ALL    @GET("/api/v1/categories")    Call<ProductListResponse> getProductList(@Query("uuid") String uuid, @Query("page") String page, @Query("per_page") String per_page);    @GET("/api/v1/categories")    Call<ProductListResponse> getProductList(@Header("Authorization") String token, @Query("uuid") String uuid, @Query("page") String page, @Query("per_page") String per_page);    @GET("/api/v1/products/filter")    Call<ProductListResponse> getProductList(@Query("uuid") String uuid, @Query("category_id") String category_id,                                             @Query("from") String from, @Query("to") String to, @Query("order_by") String order_by, @Query("order_field") String order_field,                                             @Query("page") String page, @Query("per_page") String per_page);    @GET("/api/v1/products/filter")    Call<ProductListResponse> getProductList(@Header("Authorization") String token, @Query("uuid") String uuid, @Query("category_id") String category_id,                                             @Query("from") String from, @Query("to") String to, @Query("order_by") String order_by, @Query("order_field") String order_field,                                             @Query("page") String page, @Query("per_page") String per_page);    @GET("/api/v1/products/filter")    Call<ProductListResponse> getAllProducts(            @Query("from") String from, @Query("order_by") String order_by, @Query("order_field") String order_field, @Query("page") String page, @Query("per_page") String per_page, @Query("to") String to, @Query("uuid") String uuid    );    @GET("/api/v1/products/filter")    Call<ProductListResponse> getAllProducts(@Header("Authorization") String token,                                             @Query("from") String from, @Query("order_by") String order_by, @Query("order_field") String order_field, @Query("page") String page, @Query("per_page") String per_page, @Query("to") String to, @Query("uuid") String uuid    );    @GET("/api/v1/products/filter")    Call<ProductListResponse> getAllSimilarProducts(            @Query("from") String from,@Query("id") String id, @Query("order_by") String order_by, @Query("order_field") String order_field, @Query("page") String page, @Query("per_page") String per_page, @Query("to") String to, @Query("uuid") String uuid    );    @GET("/api/v1/products/filter")    Call<ProductListResponse> getAllSimilarProducts(@Header("Authorization") String token,                                                    @Query("from") String from, @Query("id") String id, @Query("order_by") String order_by, @Query("order_field") String order_field, @Query("page") String page, @Query("per_page") String per_page, @Query("to") String to, @Query("uuid") String uuid    );    @GET("/api/v1/products/filter")    Call<ProductListResponse> getAllProducts(@Query("category_id") List<Integer> category_id, @Query("uuid") String uuid,                                             @Query("from") String from, @Query("to") String to, @Query("order_by") String order_by, @Query("order_field") String order_field,                                             @Query("page") String page, @Query("per_page") String per_page);    @GET("/api/v1/products/filter")    Call<ProductListResponse> getAllProducts(@Header("Authorization") String token, @Query("category_id") List<Integer> category_id, @Query("uuid") String uuid,                                             @Query("from") String from, @Query("to") String to, @Query("order_by") String order_by, @Query("order_field") String order_field,                                             @Query("page") String page, @Query("per_page") String per_page);    @GET("/api/v1/products/filter")    Call<ProductListResponse> getAllProducts(@Query("category_id") List<Integer> category_id, @Query("brand_id") List<Integer> brand_id, @Query("sub_category_id") List<Integer> sub_cat_id,@Query("from") String from,                                             @Query("order_by") String order_by,@Query("order_field") String order_field,@Query("page") String page, @Query("per_page") String per_page,                                             @Query("to") String to,@Query("uuid") String uuid,@Query("on_sale") String on_sale    );    @GET("/api/v1/products/filter")    Call<ProductListResponse> getAllProducts(@Header("Authorization") String token, @Query("category_id") List<Integer> category_id, @Query("brand_id") List<Integer> brand_id, @Query("sub_category_id") List<Integer> sub_cat_id,@Query("from") String from,                                             @Query("order_by") String order_by,@Query("order_field") String order_field,@Query("page") String page, @Query("per_page") String per_page,                                             @Query("to") String to,@Query("uuid") String uuid,@Query("on_sale") String on_sale                                             );    //CHANGE PASSWORD    @PUT("/api/v1/users/{user_id}/update_password")    Call<PasswordResponse> changePassword(@Header("Authorization") String token, @Path("user_id") String user_id, @Body PasswordRequest passwordRequest);    //Forgot password    @POST("/api/v1/users/password")    Call<PasswordResponse> ForgotPassword(@Body PasswordRequest passwordRequest);    //ADDRESS    @POST("/api/v1/users/{user_id}/addresses")    Call<AddressAddResponse> AddAddress(@Header("Authorization") String token, @Path("user_id") String user_id, @Body AddressRequest addressRequest);    @POST("/api/v1/users/{user_id}/addresses")    Call<AddressAddResponse> AddAddress(@Path("user_id") String user_id, @Body AddressRequest addressRequest);    @PUT("/api/v1/users/{user_id}/addresses/{id}")    Call<AddressAddResponse> EditAddress(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("id") String id, @Body AddressRequest addressRequest);    @PUT("/api/v1/users/{user_id}/addresses/{id}")    Call<AddressAddResponse> EditAddress( @Path("user_id") String user_id, @Path("id") String id, @Body AddressRequest addressRequest);    @GET("/api/v1/users/{user_id}/addresses")    Call<AddressResponse> getAddresses(@Header("Authorization") String token, @Path("user_id") String user_id,@Query("uuid") String uuid);    @GET("/api/v1/users/{user_id}/addresses")    Call<AddressResponse> getAddresses( @Path("user_id") String user_id,@Query("uuid") String uuid);    @PUT("/api/v1/users/{user_id}/carts/{cart_id}/add_address_to_order")    Call<AddressAddResponse> addDeliveryAddress(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("cart_id") String cart_id, @Body AddDeliveryAddressRequest addDeliveryAddressRequest);    @PUT("/api/v1/users/{user_id}/carts/{cart_id}/add_address_to_order")    Call<AddressAddResponse> addDeliveryAddress(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("cart_id") String cart_id, @Body AddressRequest addressRequest);    //@DELETE("/api/v1/users/{user_id{/addresses/{id}")    @HTTP(method = "DELETE", path = "/api/v1/users/{user_id}/addresses/{address_id}", hasBody = true)    Call<AddressAddResponse> removeAddress(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("address_id") String id);    @HTTP(method = "DELETE", path = "/api/v1/users/{user_id}/addresses/{address_id}", hasBody = true)    Call<AddressAddResponse> removeAddress( @Path("user_id") String user_id, @Path("address_id") String id,@Body RemoveAddressRequest removeAddressRequest);    // Searches    @GET("/api/v1/search/recent_search")    Call<SearchResponse> getRecentSearches(@Header("Authorization") String token, @Query("uuid") String uuid);    @GET("/api/v1/search/recent_search")    Call<SearchResponse> getRecentSearches(@Query("uuid") String uuid);    @GET("/api/v1/search")    Call<SearchResultsResponse> getSearchResults(@Header("Authorization") String token, @Query("uuid") String uuid, @Query("query") String query);    @GET("/api/v1/search")    Call<SearchResultsResponse> getSearchResults(@Query("uuid") String uuid, @Query("query") String query);    @GET("/api/v1/search/fetch_search_records")    Call<SearchProductResponse> getFetchRecordOfSearch(@Header("Authorization") String token,@Query("class_id") String class_id, @Query("class_name") String class_name,@Query("query") String query,@Query("results_count") String results_count, @Query("uuid") String uuid   );    @GET("/api/v1/search/fetch_search_records")    Call<SearchProductResponse> getFetchRecordOfSearch(@Query("class_id") String class_id, @Query("class_name") String class_name,@Query("query") String query,@Query("results_count") String results_count, @Query("uuid") String uuid   );    //NOTIFICATION    @GET("/api/v1/users/{user_id}/notifications")    Call<NotificationResponse> getNotificationList(@Header("Authorization") String token, @Path("user_id") String user_id, @Query("page") String page, @Query("per_page") String per_page);    @HTTP(method = "DELETE", path = "/api/v1/users/{user_id}/notifications/{notification_id}", hasBody = true)    Call<GuestUserCreateResponse> deleteNotification(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("notification_id") String notification_id);    @HTTP(method = "DELETE", path = "/api/v1/users/{user_id}/notifications/destroy_all", hasBody = true)    Call<GuestUserCreateResponse> clearAllNotification(@Header("Authorization") String token, @Path("user_id") String user_id);    // BECOME PARTNER    @POST("/api/v1/stores/become_partner")    Call<UpdateStoreResponse> addBecomePartner(@Body AddStore addStore);    // BECOME PARTNER    @Multipart    @PUT("/api/v1/users/{user_id}")    Call<GuestUserCreateResponse> updateProfile(@Header("Authorization") String token, @Path("user_id") String user_id, @Part MultipartBody.Part image, @Part("name") RequestBody name, @Part("phone_number") RequestBody phone_number,@Part("delete_profile_picture") RequestBody delete_profile_picture);    @PUT("/api/v1/users/{user_id}")    Call<GuestUserCreateResponse> updateProfile(@Header("Authorization") String token, @Path("user_id") String user_id, @Body ProfileUpdateRequest profileUpdateRequest);    //CARD    @GET("/api/v1/users/{user_id}/list_saved_cards")    Call<CardListResponse> getCardList(@Header("Authorization") String token, @Path("user_id") String user_id);    @POST("/api/v1/users/{user_id}/save_card")    Call<CardAddResponse> addCard(@Header("Authorization") String token, @Path("user_id") String user_id, @Body AddCardRequest addCardRequest);    @HTTP(method = "DELETE", path = "/api/v1/users/{user_id}/remove_card", hasBody = true)    Call<CardAddResponse> deleteCard(@Header("Authorization") String token, @Path("user_id") String user_id, @Body DeleteCardRequest deleteCardRequest);    //ORDER LIST    @GET("/api/v1/users/{user_id}/my_orders")    Call<OrderListResponse> getOrderList(@Header("Authorization") String token, @Path("user_id") String user_id);    @POST("/api/v1/users/{user_id}/carts/{order_id}/reorder")    Call<OrderListResponse> reorderOrder(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id);    @PUT("/api/v1/users/{user_id}/carts/{order_id}/cancel_order")    Call<OrderListResponse> cancelOrder(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id, @Body CancelOrderRequest cancelOrderRequest);    @POST("/api/v1/order_transactions")    Call<PaymentResponse> paymentOrder(@Header("Authorization") String token, @Body PaymentRequest paymentRequest);    @PUT("/api/v1/users/{user_id}/carts/{order_id}/update_payment_source")    Call<PaymentResponse> retryPayment(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id,@Body PaymentRequest paymentRequest);    //RESET PASSWORD    @PUT("/api/v1/users/password")    Call<PasswordResponse> resetPassword(@Body ResetPasswordRequest passwordRequest);}