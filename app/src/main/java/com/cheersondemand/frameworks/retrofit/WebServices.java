package com.cheersondemand.frameworks.retrofit;import com.cheersondemand.model.BrandResponse;import com.cheersondemand.model.CategoriesResponse;import com.cheersondemand.model.GuestUserCreateResponse;import com.cheersondemand.model.ProductsWithCategoryResponse;import com.cheersondemand.model.address.AddressRequest;import com.cheersondemand.model.address.AddressResponse;import com.cheersondemand.model.authentication.AuthenticationResponse;import com.cheersondemand.model.authentication.GenRequest;import com.cheersondemand.model.authentication.LoginRequest;import com.cheersondemand.model.authentication.SignUpRequest;import com.cheersondemand.model.authentication.SocialLoginRequest;import com.cheersondemand.model.changepassword.PasswordRequest;import com.cheersondemand.model.changepassword.PasswordResponse;import com.cheersondemand.model.coupon.ApplyCouponRequest;import com.cheersondemand.model.coupon.CouponInfoResponse;import com.cheersondemand.model.coupon.CouponListResponse;import com.cheersondemand.model.coupon.CouponRequest;import com.cheersondemand.model.location.SaveLocation;import com.cheersondemand.model.location.SaveLocationResponse;import com.cheersondemand.model.logout.LogoutRequest;import com.cheersondemand.model.logout.LogoutResponse;import com.cheersondemand.model.order.CreateOrderResponse;import com.cheersondemand.model.order.addtocart.AddToCartRequest;import com.cheersondemand.model.order.addtocart.AddToCartResponse;import com.cheersondemand.model.order.addtocart.CartHasItemResponse;import com.cheersondemand.model.order.updatecart.UpdateCartRequest;import com.cheersondemand.model.order.updatecart.UpdateCartResponse;import com.cheersondemand.model.productList.ProductListResponse;import com.cheersondemand.model.productdescription.SimilarProductsResponse;import com.cheersondemand.model.store.StoreListResponse;import com.cheersondemand.model.store.UpdateStore;import com.cheersondemand.model.store.UpdateStoreResponse;import com.cheersondemand.model.wishlist.WishListDataResponse;import com.cheersondemand.model.wishlist.WishListRequest;import com.cheersondemand.model.wishlist.WishListResponse;import retrofit2.Call;import retrofit2.http.Body;import retrofit2.http.GET;import retrofit2.http.HTTP;import retrofit2.http.Header;import retrofit2.http.POST;import retrofit2.http.PUT;import retrofit2.http.Path;import retrofit2.http.Query;public interface WebServices {    @POST("/cheers_on_demand/api/v1/users")    Call<AuthenticationResponse> signUpUsingEmail(@Body SignUpRequest signUpRequest);    @POST("/cheers_on_demand/api/v1/oauth/token")    Call<AuthenticationResponse> loginUsingEmail(@Body LoginRequest loginRequest);    @POST("/cheers_on_demand/api/v1/oauth/token")    Call<AuthenticationResponse> loginUsingSocial(@Body SocialLoginRequest socialLoginRequest);    @GET("/cheers_on_demand/api/v1/brands")    Call<BrandResponse> getBrands(@Query("uuid") String uuid);    @GET("/cheers_on_demand/api/v1/brands")    Call<BrandResponse> getBrands(@Header("Authorization") String token, @Query("uuid") String uuid);    @GET("/cheers_on_demand/api/v1/categories")    Call<CategoriesResponse> getCategories(@Query("uuid") String uuid);    @GET("/cheers_on_demand/api/v1/categories")    Call<CategoriesResponse> getCategories(@Header("Authorization") String token,@Query("uuid") String uuid);    //LANDING SCREEN    @GET("/cheers_on_demand/api/v1/products")    Call<ProductsWithCategoryResponse> getProductsWithCategories(@Query("uuid") String uuid);    @GET("/cheers_on_demand/api/v1/products")    Call<ProductsWithCategoryResponse> getProductsWithCategories(@Header("Authorization") String token, @Query("uuid") String uuid);    @POST("/cheers_on_demand/api/v1/users/create_guest_user")    Call<GuestUserCreateResponse> createGuestUser(@Body GenRequest uuid);    @POST("/cheers_on_demand/api/v1/oauth/revoke")    Call<LogoutResponse> Logout(@Body LogoutRequest logoutRequest);    //STORE    @GET("/cheers_on_demand/api/v1/stores/available_stores_list")    Call<StoreListResponse> getStoreList(@Query("uuid") String uuid);    @GET("/cheers_on_demand/api/v1/stores/available_stores_list")    Call<StoreListResponse> getStoreList(@Header("Authorization") String token, @Query("uuid") String uuid);    @PUT("/cheers_on_demand/api/v1/users/{user_id}/update_current_store")    Call<UpdateStoreResponse> updateStore(@Path("user_id") String user_id, @Body UpdateStore updateStore);    @PUT("/cheers_on_demand/api/v1/users/{user_id}/update_current_store")    Call<UpdateStoreResponse> updateStore(@Header("Authorization") String token, @Path("user_id") String user_id, @Body UpdateStore updateStore);    //SAVE LOCATION    @PUT("/cheers_on_demand/api/v1/users/{user_id}/save_user_location")    Call<SaveLocationResponse> saveLocation(@Path("user_id") String user_id, @Body SaveLocation saveLocation);    @PUT("/cheers_on_demand/api/v1/users/{user_id}/save_user_location")    Call<SaveLocationResponse> saveLocation(@Header("Authorization") String token, @Path("user_id") String user_id, @Body SaveLocation saveLocation);    //SIMILAR PRODUCT    @GET("/cheers_on_demand/api/v1/products/{product_id}")    Call<SimilarProductsResponse> getSimilarProducts(@Path("product_id") String product_id, @Query("uuid") String uuid, @Query("page") String page, @Query("per_page") String per_page);    @GET("/cheers_on_demand/api/v1/products/{product_id}")    Call<SimilarProductsResponse> getSimilarProductsAuth(@Header("Authorization") String token, @Path("product_id") String product_id, @Query("page") String page, @Query("per_page") String per_page);    //Create Order    @POST("/cheers_on_demand/api/v1/users/{user_id}/carts")    Call<CreateOrderResponse> createOrder(@Path("user_id") String user_id, @Body GenRequest uuid);    @POST("/cheers_on_demand/api/v1/users/{user_id}/carts")    Call<CreateOrderResponse> createOrder(@Header("Authorization") String token, @Path("user_id") String user_id, @Body GenRequest uuid);    //ADD To Cart    @POST("/cheers_on_demand/api/v1/users/{user_id}/carts/{order_id}/add_cart_item")    Call<AddToCartResponse> addToCart(@Path("user_id") String user_id, @Path("order_id") String order_id, @Body AddToCartRequest addToCartRequest);    @POST("/cheers_on_demand/api/v1/users/{user_id}/carts/{order_id}/add_cart_item")    Call<AddToCartResponse> addToCart(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id, @Body AddToCartRequest addToCartRequest);    //Update Cart    @PUT("/cheers_on_demand/api/v1/users/{user_id}/carts/{order_id}/update_cart_item")    Call<UpdateCartResponse> updateCart(@Path("user_id") String user_id, @Path("order_id") String order_id, @Body UpdateCartRequest updateProductQuantityRequest);    @PUT("/cheers_on_demand/api/v1/users/{user_id}/carts/{order_id}/update_cart_item")    Call<UpdateCartResponse> updateCart(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id, @Body UpdateCartRequest updateProductQuantityRequest);    //CHECK CART HAS ITEM    @PUT("/cheers_on_demand/api/v1/users/{user_id}/carts/has_product'")    Call<CartHasItemResponse> getCartHasItem(@Path("user_id") String user_id, @Body GenRequest uuid);    @PUT("/cheers_on_demand/api/v1/users/{user_id}/carts/has_product'")    Call<CartHasItemResponse> getCartHasItem(@Header("Authorization") String token, @Path("user_id") String user_id,@Body GenRequest uuid);    //  @DELETE("/cheers_on_demand/api/v1/users/{user_id}/carts/{order_id}/remove_cart_item")     //DELETE PRODUCT    @HTTP(method = "DELETE", path = "/cheers_on_demand/api/v1/users/{user_id}/carts/{order_id}/remove_cart_item", hasBody = true)    Call<UpdateCartResponse> removeItemFromCart(@Path("user_id") String user_id, @Path("order_id") String order_id, @Body UpdateCartRequest updateProductQuantityRequest);    @HTTP(method = "DELETE", path = "/cheers_on_demand/api/v1/users/{user_id}/carts/{order_id}/remove_cart_item", hasBody = true)    Call<UpdateCartResponse> removeItemFromCart(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id, @Body UpdateCartRequest updateProductQuantityRequest);    // CART LIST    @GET("/cheers_on_demand/api/v1/users/{user_id}/carts/{order_id}")    Call<UpdateCartResponse> getCartList( @Path("user_id") String user_id, @Path("order_id") String order_id,@Query("uuid") String uuid);    @GET("/cheers_on_demand/api/v1/users/{user_id}/carts/{order_id}")    Call<UpdateCartResponse> getCartList(@Header("Authorization") String token, @Path("user_id") String user_id, @Path("order_id") String order_id, @Query("uuid") String uuid);    // WishList    @POST("/cheers_on_demand/api/v1/users/{user_id}/wishlists")    Call<WishListResponse> addToWishList(@Path("user_id") String user_id, @Body WishListRequest wishListRequest);    @POST("/cheers_on_demand/api/v1/users/{user_id}/wishlists")    Call<WishListResponse> addToWishList(@Header("Authorization") String token,@Path("user_id") String user_id, @Body WishListRequest wishListRequest);    //DELETE PRODUCT    @HTTP(method = "DELETE", path = "/cheers_on_demand/api/v1/users/{user_id}/wishlists", hasBody = true)    Call<WishListResponse> removeFromWishList(@Path("user_id") String user_id, @Body WishListRequest wishListRequest);    @HTTP(method = "DELETE", path = "/cheers_on_demand/api/v1/users/{user_id}/wishlists", hasBody = true)    Call<WishListResponse> removeFromWishList(@Header("Authorization") String token,@Path("user_id") String user_id, @Body WishListRequest wishListRequest);    @GET("/cheers_on_demand/api/v1/users/{user_id}/wishlists")    Call<WishListDataResponse> getWishList(@Path("user_id") String user_id,@Query("uuid") String uuid);    @GET("/cheers_on_demand/api/v1/users/{user_id}/wishlists")    Call<WishListDataResponse> getWishList(@Header("Authorization") String token, @Path("user_id") String user_id, @Query("uuid") String uuid);    //GET WISHLIST    // COUPONS    @POST("/cheers_on_demand/api/v1/coupons/apply_coupon")    Call<UpdateCartResponse> applyCoupon(@Body ApplyCouponRequest applyCouponRequest);    @POST("/cheers_on_demand/api/v1/coupons/apply_coupon")    Call<UpdateCartResponse> applyCoupon(@Header("Authorization") String token, @Body ApplyCouponRequest applyCouponRequest);    @GET("/cheers_on_demand/api/v1/coupons")    Call<CouponListResponse> getListOfCoupon( @Query("uuid") String uuid,@Query("cart_id") String cart_id);    @GET("/cheers_on_demand/api/v1/coupons")    Call<CouponListResponse> getListOfCoupon(@Header("Authorization") String token, @Query("uuid") String uuid, @Query("cart_id") String cart_id);    @GET("/cheers_on_demand/api/v1/coupons/{coupon_id}")    Call<CouponInfoResponse> getCouponDetail(@Path("coupon_id") String coupon_id,@Query("uuid") String uuid);    @GET("/cheers_on_demand/api/v1/coupons/{coupon_id}")    Call<CouponInfoResponse> getCouponDetail(@Header("Authorization") String token, @Path("coupon_id") String coupon_id, @Query("uuid") String uuid);    @HTTP(method = "DELETE", path = "/cheers_on_demand/api/v1/coupons/remove_coupon", hasBody = true)    Call<UpdateCartResponse> removeCoupon(@Header("Authorization") String token, @Body CouponRequest couponRequest);    @HTTP(method = "DELETE", path = "/cheers_on_demand/api/v1/coupons/remove_coupon", hasBody = true)    Call<UpdateCartResponse> removeCoupon( @Body CouponRequest couponRequest);    //Products Listing ALL     @GET("/cheers_on_demand/api/v1/categories")    Call<ProductListResponse> getProductList( @Query("uuid") String uuid, @Query("page") String page, @Query("per_page") String per_page);    @GET("/cheers_on_demand/api/v1/categories")    Call<ProductListResponse> getProductList(@Header("Authorization") String token, @Query("uuid") String uuid, @Query("page") String page, @Query("per_page") String per_page);    @GET("/cheers_on_demand/api/v1/products/filter")    Call<ProductListResponse> getProductList(@Query("uuid") String uuid,@Query("category_id") String category_id,                                             @Query("from") String from,@Query("to") String to,@Query("order_by") String order_by,@Query("order_field") String order_field,                                             @Query("page") String page, @Query("per_page") String per_page);    @GET("/cheers_on_demand/api/v1/products/filter")    Call<ProductListResponse> getProductList(@Header("Authorization") String token, @Query("uuid") String uuid,@Query("category_id") String category_id,                                             @Query("from") String from,@Query("to") String to,@Query("order_by") String order_by,@Query("order_field") String order_field,                                             @Query("page") String page, @Query("per_page") String per_page);    @GET("/cheers_on_demand/api/v1/products/filter")    Call<ProductListResponse> getAllProducts(@Query("uuid") String uuid,                                             @Query("from") String from,@Query("to") String to,@Query("order_by") String order_by,@Query("order_field") String order_field,                                             @Query("page") String page, @Query("per_page") String per_page);    @GET("/cheers_on_demand/api/v1/products/filter")    Call<ProductListResponse> getAllProducts(@Header("Authorization") String token, @Query("uuid") String uuid,                                             @Query("from") String from,@Query("to") String to,@Query("order_by") String order_by,@Query("order_field") String order_field,                                             @Query("page") String page, @Query("per_page") String per_page);    //CHANGE PASSWORD    @PUT("/cheers_on_demand/api/v1/users/{user_id}/update_password")    Call<PasswordResponse> changePassword(@Header("Authorization") String token,@Path("user_id") String user_id, @Body PasswordRequest passwordRequest);    //Forgot password    @POST("/api/v1/users/password")    Call<PasswordResponse> ForgotPassword(@Body PasswordRequest passwordRequest);    //ADDRESS    @POST("/cheers_on_demand/api/v1/users/{user_id}/addresses")    Call<AddressResponse> AddAddress( @Header("Authorization") String token, @Path("user_id") String user_id, @Body AddressRequest addressRequest);    @PUT("/cheers_on_demand/api/v1/users/{user_id}/addresses/{id}")    Call<AddressResponse> EditAddress( @Header("Authorization") String token,@Path("user_id") String user_id,@Path("id") String id, @Body AddressRequest addressRequest);    @GET("/cheers_on_demand/api/v1/users/{user_id}/addresses")    Call<AddressResponse> getAddresses( @Header("Authorization") String token, @Path("user_id") String user_id);    @HTTP(method = "DELETE", path = "/api/v1/users/{user_id{/addresses/{id}", hasBody = true)    Call<AddressResponse> removeAddress( @Header("Authorization") String token,@Path("user_id") String user_id,@Path("id") String id);}