package frameworks.retrofit;import com.google.gson.Gson;import com.google.gson.internal.LinkedTreeMap;import com.universe.villiger.base.model.bean.AddFriendFavourite;import com.universe.villiger.base.model.bean.Address;import com.universe.villiger.base.model.bean.CallItem;import com.universe.villiger.base.model.bean.CardToken;import com.universe.villiger.base.model.bean.InboxItem;import com.universe.villiger.base.model.bean.LoginResponse;import com.universe.villiger.base.model.bean.LoginToken;import com.universe.villiger.base.model.bean.MessageItem;import com.universe.villiger.base.model.bean.ParentProfileUpdatePatch;import com.universe.villiger.base.model.bean.ParentalDetail;import com.universe.villiger.base.model.bean.Review;import com.universe.villiger.base.model.bean.SitterProfileUpdatePatch;import com.universe.villiger.base.model.bean.UserInfo;import com.universe.villiger.base.model.bean.UserType;import com.universe.villiger.parent.model.bean.BookingItem;import com.universe.villiger.parent.model.bean.BookingRequest;import com.universe.villiger.parent.model.bean.HomeFeeds;import com.universe.villiger.parent.model.discover.TinderSwipeListenerImpl;import com.universe.villiger.sitter.model.bean.SitterBookingItem;import java.io.File;import java.util.List;import java.util.Map;import frameworks.appsession.AppBaseApplication;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.RequestBody;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Call;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;import retrofit2.http.GET;import retrofit2.http.Header;import retrofit2.http.Path;public class WebServicesWrapper {    //private final static String BASE_URL = "https://vilger.pier31.co/";    private final static String BASE_URL = "http://138.68.112.90/";  ///  private final static String BASE_URL = "http://app.villiger.io/";    private static WebServicesWrapper wrapper;    protected WebServices webServices;    private Gson gson;    private WebServicesWrapper(String baseUrl) {        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);        OkHttpClient client = new OkHttpClient.Builder().addInterceptor(interceptor).build();        webServices = new Retrofit.Builder()                .addConverterFactory(new RetrofitConverter())                .addConverterFactory(GsonConverterFactory.create())                .baseUrl(baseUrl)                .client(client)                .build().create(WebServices.class);        gson = new Gson();    }    public static WebServicesWrapper getInstance() {        if (wrapper == null)            wrapper = new WebServicesWrapper(BASE_URL);        return wrapper;    }    private Map<String, String> getPartMap(Object object) {        return (LinkedTreeMap) gson.fromJson(gson.toJson(object), Object.class);    }    private MultipartBody.Part getPart(String name, File file) {        if (file == null || name == null)            return null;        RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);        MultipartBody.Part body = MultipartBody.Part.createFormData(name, file.getName(), requestFile);        return body;    }    public Call<LoginResponse> login(LoginToken acc, ResponseResolver<LoginResponse> responseResponseResolver) {        Call<LoginResponse> loginResponseCall = webServices.login(acc.getAccess_token());        loginResponseCall.enqueue(responseResponseResolver);        return loginResponseCall;    }    public Call<UserInfo> getMyProfile(ResponseResolver<UserInfo> responseResponseResolver) {        Call<UserInfo> loginResponseCall = webServices.getmyProfile(getAuthKey());        loginResponseCall.enqueue(responseResponseResolver);        return loginResponseCall;    }    public Call<List<UserInfo>> discoverProfile(ResponseResolver<List<UserInfo>> responseResponseResolver) {        Call<List<UserInfo>> loginResponseCall = webServices.discoverSitters(getAuthKey());        loginResponseCall.enqueue(responseResponseResolver);        return loginResponseCall;    }    public Call<UserInfo> createProfile(UserType userType, ResponseResolver<UserInfo> responseResolver) {        Call<UserInfo> createProfileCall = webServices.createProfile(getAuthKey(), userType);        createProfileCall.enqueue(responseResolver);        return createProfileCall;    }    public Call<String> deleteAccount(ResponseResolver<String> responseResolver) {        Call<String> deleteProfileCall = webServices.deleteAccount(getAuthKey());        deleteProfileCall.enqueue(responseResolver);        return deleteProfileCall;    }    public Call<UserInfo> updateChildCount(ResponseResolver<UserInfo> responseResolver, ParentalDetail.ChildCount childCount) {        Call<UserInfo> childUpdateCall = webServices.updateChildCount(getAuthKey(), childCount);        childUpdateCall.enqueue(responseResolver);        return childUpdateCall;    }    public Call<UserInfo> updateDiscription(ResponseResolver<UserInfo> responseResolver, ParentalDetail discription) {        Call<UserInfo> childUpdateCall = webServices.updateDiscription(getAuthKey(), discription);        childUpdateCall.enqueue(responseResolver);        return childUpdateCall;    }    public Call<Address[]> createAddresses(Address address, ResponseResolver<Address[]> responseResolver) {        Call<Address[]> createAddressCall = webServices.createAddresses(getAuthKey(), address);        createAddressCall.enqueue(responseResolver);        return createAddressCall;    }    public Call<Address[]> updateAddress(Address address, int id, ResponseResolver<Address[]> responseResolver) {        Call<Address[]> updateAddressCall = webServices.updateAddress(getAuthKey(), address, id);        updateAddressCall.enqueue(responseResolver);        return updateAddressCall;    }    public Call<String> updateToken(CardToken stripeToken, ResponseResolver<String> responseResolver) {        Call<String> updateTokenCall = webServices.updateToken(getAuthKey(), stripeToken);        updateTokenCall.enqueue(responseResolver);        return updateTokenCall;    }    public Call<UserInfo> updateParentProfile(ParentProfileUpdatePatch parentalDetail, ResponseResolver<UserInfo> responseResolver) {        Call<UserInfo> parentProfileUpdateCall = webServices.updateParentProfile(getAuthKey(), parentalDetail);        parentProfileUpdateCall.enqueue(responseResolver);        return parentProfileUpdateCall;    }    public Call<UserInfo> updateSitterProfile(SitterProfileUpdatePatch sitterDetail, ResponseResolver<UserInfo> responseResolver) {        Call<UserInfo> parentProfileUpdateCall = webServices.updateSitterProfile(getAuthKey(), sitterDetail);        parentProfileUpdateCall.enqueue(responseResolver);        return parentProfileUpdateCall;    }    public Call<BookingItem> reqeustBooking(BookingRequest bookingRequest, ResponseResolver<BookingItem> responseResolver) {        Call<BookingItem> bookingItemCall = webServices.reqeustBooking(getAuthKey(), bookingRequest);        bookingItemCall.enqueue(responseResolver);        return bookingItemCall;    }    public Call<BookingItem[]> bookingList(ResponseResolver<BookingItem[]> responseResolver) {        Call<BookingItem[]> bookingItemRequests = webServices.bookingList(getAuthKey());        bookingItemRequests.enqueue(responseResolver);        return bookingItemRequests;    }    public Call<TinderSwipeListenerImpl.BookMark> rejectSitter(ResponseResolver<TinderSwipeListenerImpl.BookMark> responseResolver, TinderSwipeListenerImpl.Target target) {        Call<TinderSwipeListenerImpl.BookMark> bookingItemRequests = webServices.rejectSitter(getAuthKey(), target.getTarget_id());        bookingItemRequests.enqueue(responseResolver);        return bookingItemRequests;    }    public Call<TinderSwipeListenerImpl.BookMark> bookMarkSitter(ResponseResolver<TinderSwipeListenerImpl.BookMark> responseResolver, TinderSwipeListenerImpl.Target target) {        Call<TinderSwipeListenerImpl.BookMark> bookingItemRequests = webServices.bookmarkSitter(getAuthKey(), target.getTarget_id());        bookingItemRequests.enqueue(responseResolver);        return bookingItemRequests;    }    public Call<HomeFeeds> getHomeFeeds(ResponseResolver<HomeFeeds> responseResolver) {        Call<HomeFeeds> homeFeedsRequest = webServices.getHomeFeeds(getAuthKey());        homeFeedsRequest.enqueue(responseResolver);        return homeFeedsRequest;    }    public Call<List<UserInfo>> getFavouriteSitters(ResponseResolver<List<UserInfo>> favouriteSitters) {        Call<List<UserInfo>> favouriteSittersCall = webServices.getFavouriteSitters(getAuthKey());        favouriteSittersCall.enqueue(favouriteSitters);        return favouriteSittersCall;    }    public Call<List<UserInfo>> getFriendsSitter(ResponseResolver<List<UserInfo>> friendSitters) {        Call<List<UserInfo>> friendSittersCall = webServices.getFriendsSitter(getAuthKey());        friendSittersCall.enqueue(friendSitters);        return friendSittersCall;    }    public Call<List<UserInfo>> getFriends(ResponseResolver<List<UserInfo>> friendSitters) {        Call<List<UserInfo>> friendSittersCall = webServices.getFriends(getAuthKey());        friendSittersCall.enqueue(friendSitters);        return friendSittersCall;    }    public Call<List<UserInfo>> getBookMarkSitterList(ResponseResolver<List<UserInfo>> sitterList) {        Call<List<UserInfo>> sitterListCall = webServices.getBookMarkSitters(getAuthKey());        sitterListCall.enqueue(sitterList);        return sitterListCall;    }    public Call<List<UserInfo>> getParentsNearBy(ResponseResolver<List<UserInfo>> parentLIst) {        Call<List<UserInfo>> sitterListCall = webServices.getParentsNearBy(getAuthKey());        sitterListCall.enqueue(parentLIst);        return sitterListCall;    }    public Call<List<CallItem>> getCallingUserDetals(ResponseResolver<List<CallItem>> callee_Details) {        Call<List<CallItem>> callUserDetailsCall = webServices.getCallingUserDetals(getAuthKey());        callUserDetailsCall.enqueue(callee_Details);        return callUserDetailsCall;    }    public Call<AddFriendFavourite> setFavourite(ResponseResolver<AddFriendFavourite> addFavouriteCallee, AddFriendFavourite addFriendFavourite) {        Call<AddFriendFavourite> setFriedFavouriteDetailsCall = webServices.setFavourite(getAuthKey(), addFriendFavourite.isFavorited(), addFriendFavourite.getId());        setFriedFavouriteDetailsCall.enqueue(addFavouriteCallee);        return setFriedFavouriteDetailsCall;    }    public Call<AddFriendFavourite> setFriend(ResponseResolver<AddFriendFavourite> addFriendCallee, AddFriendFavourite addFriendFavourite) {        Call<AddFriendFavourite> setFriedFavouriteDetailsCall = webServices.setFriends(getAuthKey(), addFriendFavourite.is_friend(), addFriendFavourite.getId());        setFriedFavouriteDetailsCall.enqueue(addFriendCallee);        return setFriedFavouriteDetailsCall;    }    public Call<SitterBookingItem[]> bookingRequestList(ResponseResolver<SitterBookingItem[]> sitterBookingItemCallee) {        Call<SitterBookingItem[]> sitterBookingItems = webServices.bookingRequestList(getAuthKey());        sitterBookingItems.enqueue(sitterBookingItemCallee);        return sitterBookingItems;    }    public Call<UserInfo.RelationShip> getRelationShip(ResponseResolver<UserInfo.RelationShip> relationShipCallee, String id) {        Call<UserInfo.RelationShip> relationShipItems = webServices.getRelationShip(getAuthKey(),id);        relationShipItems.enqueue(relationShipCallee);        return relationShipItems;    }    public Call<List<UserInfo>> getVillagers(ResponseResolver<List<UserInfo>> getVillagersList, String id) {        Call<List<UserInfo>> villagersItem = webServices.getVillagers(getAuthKey(),id);        villagersItem.enqueue(getVillagersList);        return villagersItem;    }    public Call<List<Review>> getReviews(ResponseResolver<List<Review>> reviewsItemCallee, String id) {        Call<List<Review>> reviewItems = webServices.getReviews(getAuthKey(),id);        reviewItems.enqueue(reviewsItemCallee);        return reviewItems;    }    public Call<List<InboxItem>> getConversations(ResponseResolver<List<InboxItem>> conversationItemsCallee) {        Call<List<InboxItem>> inboxItems = webServices.getConversations(getAuthKey());        inboxItems.enqueue(conversationItemsCallee);        return inboxItems;    }    public Call<MessageItem> getMessages(int userId,ResponseResolver<MessageItem> conversationItemsCallee) {        Call<MessageItem> messageItemCall = webServices.getUserConversation(getAuthKey(),userId+"");        messageItemCall.enqueue(conversationItemsCallee);        return messageItemCall;    }    public Call<String> updateReadStatus(int conversationId,ResponseResolver<String> readStatusCallee) {        Call<String> readStatusCall = webServices.updateReadStatus(getAuthKey(),conversationId+"");        readStatusCall.enqueue(readStatusCallee);        return readStatusCall;    }    public String getAuthKey() {        return "Token " + AppBaseApplication.getApplication().getmAuthID();    }//    public Call<BlossomResponse<LoginResponse>> login(String username, String password, ResponseResolver<LoginResponse> responseResolver) {//        Call<BlossomResponse<LoginResponse>> loginCall = webServices.login(APP_HEADER, username, password);//        loginCall.enqueue(responseResolver);//        return loginCall;//    }////    public Call<BlossomResponse<ArrayList<School>>> getSchool(ResponseResolver<ArrayList<School>> responseResolver) {//        Call<BlossomResponse<ArrayList<School>>> schoolResponseCall = webServices.getSchool(APP_HEADER, getAccessToken(), getCoachId());//        schoolResponseCall.enqueue(responseResolver);//        return schoolResponseCall;//    }////    public Call<BlossomResponse<ArrayList<Event>>> getEventList(int schoolId, ResponseResolver<ArrayList<Event>> responseResolver) {//        Call<BlossomResponse<ArrayList<Event>>> eventResponseCall = webServices.getEventList(APP_HEADER, getAccessToken(), schoolId);//        eventResponseCall.enqueue(responseResolver);//        return eventResponseCall;//    }////    public Call<BlossomResponse<StudentListResponse>> getStudentList(int eventId, ResponseResolver<StudentListResponse> responseResolver) {//        Call<BlossomResponse<StudentListResponse>> eventResponseCall = webServices.getStudentList(APP_HEADER, getAccessToken(), eventId);//        eventResponseCall.enqueue(responseResolver);//        return eventResponseCall;//    }////    public Call<BlossomResponse<AssessmentResponse>> getAssessment(int assessmentId, ResponseResolver<AssessmentResponse> responseResolver) {//        Call<BlossomResponse<AssessmentResponse>> assessmentResponseCall = webServices.getAssessment(APP_HEADER, getAccessToken(), assessmentId);//        assessmentResponseCall.enqueue(responseResolver);//        return assessmentResponseCall;//    }////    public Call<BlossomResponse<LoginResponse>> ping(String accessToken, ResponseResolver<LoginResponse> responseResolver) {//        Call<BlossomResponse<LoginResponse>> loginCall = webServices.ping(APP_HEADER, accessToken);//        loginCall.enqueue(responseResolver);//        return loginCall;//    }////    public Call<BlossomResponse<Child>> postChild(Child child, ResponseResolver<Child> responseResolver) {//        Call<BlossomResponse<Child>> childResponseCall = webServices.postChild(APP_HEADER, getAccessToken(), child);//        childResponseCall.enqueue(responseResolver);//        return childResponseCall;//    }////    public Call<BlossomResponse<Child>> updateChildImage(File file, int childId, ResponseResolver<Child> responseResolver) {//        Call<BlossomResponse<Child>> childResponseCall = webServices.updateChildImage//                (APP_HEADER, getAccessToken(), getPart("photo", file), "child", childId);//        childResponseCall.enqueue(responseResolver);//        return childResponseCall;//    }}